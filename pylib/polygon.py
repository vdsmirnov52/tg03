#!/usr/bin/python
# -*- coding: utf-8 -*-

class   polygon:
	""" Контроль принадлежности полигону    """
	dict_plgns = None
	def __init__ (self):
		self.dict_plgns = {}
		# pass
	
	def add (self, pl, plkey = None):
		""" Добавить полигон в список проверяемых """
		if type(pl) in [str, basestring]:
			pl = eval(pl)
		if not plkey:   plkey = 1 +len(self.dict_plgns.keys())
		# print pl, type(pl), plkey
		xp = []
		yp = []
		for p in pl:
			xp.append (int(100000*p[0]))
			yp.append (int(100000*p[1]))
		self.dict_plgns[plkey] = [xp,yp]
		return plkey
	
	def find_point (self, point):
		""" Поиск точки в справочнике полигонов () """
		# print " Поиск точки 0"
		if type(point) in [str, basestring]:
			point = eval(point)
		for plk in self.dict_plgns.keys():
			bol, k = self.inplygon(point[0], point[1], plkey = plk)
			if bol: return k
			
	
	def inplygon (self, x, y, pl = None, plkey = None):
		if pl:  plkey = self.add(pl, plkey)
		xp, yp = self.dict_plgns.get(plkey)
		c = 0
		x = int(100000 * x)
		y = int(100000 * y)
		for i in range(len(xp)):
			if (((yp[i] <= y and y < yp[i - 1]) or (yp[i - 1] <= y and y < yp[i])) and (x > (xp[i - 1] - xp[i]) * (y - yp[i]) / (yp[i - 1] - yp[i]) + xp[i])):
				c = 1 - c
		if c > 0:   return True, plkey
		else:       return False, plkey
	
def	_in_polygon(x, y, xp, yp):
	""" Расчет принадлежности полигону	"""
	c = 0
	for i in range(len(xp)):
		if (((yp[i]<=y and y<yp[i-1]) or (yp[i-1]<=y and y<yp[i])) and (x > (xp[i-1] - xp[i]) * (y - yp[i]) / (yp[i-1] - yp[i]) + xp[i])):
			c = 1 - c
	return c

#	координаты гаражей предприятий (АнтиСнег)
zasnow = [
	[(56.316112, 43.970077), (56.315914, 43.971063), (56.315914, 43.971063), (56.314834, 43.969362)],		# МП РЭД Автозаводского района
	[(56.207997, 43.823510), (56.207084, 43.824208), (56.206857, 43.823972), (56.206839, 43.822974), (56.207728, 43.822340)],
	[(56.347178, 43.877423), (56.346417, 43.878936), (56.345757, 43.876747), (56.345995, 43.876414)],		# МП "Дорожник"
	[(56.623218, 43.425520), (56.621990, 43.427258), (56.621659, 43.425477), (56.623052, 43.424319)],		# ООО "Городецкая ДПМК"
	[(56.247651, 43.955633), (56.247651, 43.955633), (56.247145, 43.956695), (56.247085, 43.954850), (56.247371, 43.954507)],	# ООО "Нижавтодорстрой"
	[(56.302292, 44.014141), (56.301578, 44.014570), (56.301405, 44.013475), (56.302126, 44.013100)],		# ООО "Стройдор"
	[(56.189237, 44.157650), (56.188335, 44.158283), (56.187846, 44.155804), (56.188813, 44.155246)],		# ООО "Нижавтодорстрой"
	]

#	координаты депо МУП "Борское ПАП"
zdp01 = [[56.355505, 44.075340], [56.355881, 44.078460], [56.358408, 44.077346], [56.357724, 44.074081]]	#, [56.355614, 44.075358]]
zdp02 = [[56.359483, 44.073373], [56.359911, 44.076464], [56.361095, 44.075348], [56.361005, 44.074543], [56.361564, 44.079942], [56.360666, 44.071012]]

def	is_depo_bor (x, y):
	""" Принадлежность депо МУП "Борское ПАП"	"""
	x = int(100000*x)
	y = int(100000*y)
	dp01 = [[5635550, 5635588, 5635840, 5635772], [4407534, 4407846, 4407734, 4407408]]
	dp02 = [[5635948, 5635991, 5636109, 5636100, 5636156, 5636066], [4407337, 4407646, 4407534, 4407454, 4407994, 4407101]]
	if (_in_polygon(x, y, dp01[0], dp01[1]) + _in_polygon(x, y, dp02[0], dp02[1])) > 0:
		return	True
	else:	return	False

if __name__ == "__main__":
	P = polygon()
	print P.add('((56.316112, 43.970077), (56.315914, 43.971063), (56.315914, 43.971063), (56.314834, 43.969362))')
	print P.add(((56.316112, 43.970077), (56.315914, 43.971063), (56.315914, 43.971063), (56.314834, 43.969362)),'ZZZ')
	print P.find_point('(43.816664,55.3836202)')